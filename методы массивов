.push(... items) - добавление элемента в конец массива
---
.pop() удалить элемент из конца массива
---
.shift(... items) добавить эллемиент в начало массива
---
.unshift()удалить элемент из начала массива ---
.slice(3, 7) Первым параметром указывается номер элемента массива, с которого начинается вырезание, а вторым параметром - номер элемента, на котором закончится вырезание (при этом элемент с этим номером не включится в вырезанную часть).
 Второй параметр не является обязательным. Если его не указать - подмассив возьмется с указанного в первом параметре элемента до конца массива. 
-----
.splice(2 (указать с какого элемента по счёту начинает удалять) , 3 (сколько эллементов удалит)
.forEach()
        .indexOf () == 
let fruits = ['яблоко', 'банан', 'апельсин'];
let index = fruits.indexOf('банан');
        console.log(index); //1 показывает индекс определённого элемента

        .includes () ==
const arr = [1, 2, 3, 4, 5];
console.log(arr.includes(2, 2)); // false
console.log(arr.includes(2, 1)); // true
```
В этом примере метод .includes() используется для проверки наличия числа 2 в массиве [1, 2, 3, 4, 5], начиная с индекса 2. 
Первый вызов метода возвращает false, так как число 2 находится на позиции с индексом 1, а не 2. Второй вызов метода возвращает true, так как число 2 находится на позиции с индексом 1 или позже.
---
Метод .split() в JavaScript используется для разделения строки на подстроки с помощью указанного разделителя и возвращает массив подстрок.

Пример 1:
```javascript
const str = "Hello, World!";
const arr = str.split(", ");
console.log(arr);
// Output: ["Hello", "World!"]
```
Метод .reverse() используется для изменения порядка элементов в массиве на обратный и возвращает измененный массив.
Пример 1:
const arr = [1, 2, 3, 4, 5];
arr.reverse();
console.log(arr);
// Output: [5, 4, 3, 2, 1]
```
Метод .join() используется для объединения всех элементов массива в строку с использованием указанного разделителя и возвращает полученную строку.

Пример 1:
const arr = ["Hello", "World!"];
const str = arr.join(", ");
console.log(str);
// Output: "Hello, World!"
``
Объединение всех трех методов:
const str = "Hello, World!";
const arr = str.split("").reverse().join("");
console.log(arr);
// Output: "!dlroW ,olleH"
```
В данном примере сначала строка разбивается на массив символов с помощью метода .split(""), затем порядок элементов в массиве меняется на обратный с помощью метода .reverse() и, наконец,
 все элементы объединяются в строку с помощью метода .join(""). Результатом будет строка "!dlroW ,olleH".
------------- 
метод массива at позволяет начать счётчик массива с конца (array.at(-1))
-------------------------------------------
библиотека import _ from 'lodash';
_.uniq уникалиные значения из массива.
let a = [0,0,0,0,1,2,2,3,2,3] 
 _.uniq(a) = [0,1,2,3]
--------------------------------------------
сортировка массива
.sort / .sort().reverse()
[0,3,1,2,7,8] => [0,1,2,3,7,8] => [8,7,3,2,1,0]
------------------------------------------
деструкторизация
const fruits = ['Apple', 'Banana', 'Cherry'];

const [firstFruit, secondFruit, thirdFruit] = fruits;
console.log(thirdFruit); // 'Cherry'
console.log(firstFruit); // 'Apple'
console.log(secondFruit); // 'Banana'

если ставишь запятые, то ты пропускаешь элемент.

const colors = ['Red', 'Green', 'Blue', 'Yellow'];

const [primaryColor, , , secondaryColor] = colors; // Пропускаем второй и третий элемент массива

console.log(primaryColor); // 'Red'
console.log(secondaryColor); // 'Yellow'
console.log(thirdFruit); // 'Cherry'
-------------------------------------
деструктуризация + rest 
const fruits = ['apple', 'orange', 'banana', 'pineapple'];
... – rest
const [first, ...rest] = fruits;
console.log(first); // 'apple'
console.log(rest); // ['orange', 'banana', 'pineapple']
необязательно писать rest  можно дать любое имя.
ты переносишь все оставшиеся элементы в рест
рест пишеться ИСКЛЮЧИТЕЛЬНО В КОНЦЕ МАССИВА

В ситуациях, когда нас интересует только часть массива, но не важны первые элементы, лучше воспользоваться методом массива slice():

// slice возвращает новый массив, а не изменяет старый
const rest = fruits.slice(1);
console.log(rest); // ['orange', 'banana', 'pineapple'];
Синтаксис rest можно применять также и при деструктуризации строк.

const [first, second, ...rest] = 'some string';
console.log(first); // => 's'
console.log(second); // => 'o'
console.log(rest); // => [ 'm', 'e', ' ', 's', 't', 'r', 'i', 'n', 'g' ]
--------------------------------------
деструктуризация и spread 
const frenchCities = ['paris', 'marseille'];
const cities = ['milan', 'rome', ...frenchCities];
// ['milan', 'rome', 'paris', 'marseille']

// Массив frenchCities при этом никак не меняется

// То же самое без spread
const cities = ['milan', 'rome'].concat(frenchCities);


можно ставить в любое место , хоть в начало, хоть в центр, хоть в конец.
растягивает массив. объеденяет два массива в 1.

копирование массива с помощью spread

const frenchCities = ['paris', 'marseille'];
const copy = [...frenchCities];
copy.push('lyon');
console.log(copy); // => [ 'paris', 'marseille', 'lyon' ]
console.log(frenchCities); // => [ 'paris', 'marseille' ]
